From a30a7c7eeaee8612bcbfa4746aaebea5ffa7c11b Mon Sep 17 00:00:00 2001
From: Constantin Konstantinidis <constantinkonstantinidis@gmail.com>
Date: Tue, 19 Jul 2022 07:46:28 +0200
Subject: [PATCH] encoding/xml: set depth of XMLName for anonymous struct

Add non-regression tests.

Fixes #10538
Fixes #16497

Change-Id: I65b95011eac8d3cae57836dda2e5f47f08fbda8c
---
 src/encoding/xml/marshal_test.go | 80 +++++++++++++++++++++++++++++++-
 src/encoding/xml/typeinfo.go     |  3 ++
 2 files changed, 82 insertions(+), 1 deletion(-)

diff --git a/src/encoding/xml/marshal_test.go b/src/encoding/xml/marshal_test.go
index f6bcc7fd30..bbb5ce0000 100644
--- a/src/encoding/xml/marshal_test.go
+++ b/src/encoding/xml/marshal_test.go
@@ -1254,7 +1254,7 @@ var marshalTests = []struct {
 	},
 	{
 		ExpectXML: `<outer xmlns="testns" int="10"></outer>`,
-		Value:     &OuterStruct{IntAttr: 10},
+		Value:     &OuterStruct{InnerStruct: InnerStruct{XMLName: Name{Space: "testns", Local: "outer"}}, IntAttr: 10},
 	},
 	{
 		ExpectXML: `<test xmlns="outerns" int="10"></test>`,
@@ -2435,6 +2435,84 @@ func TestIsValidDirective(t *testing.T) {
 	}
 }
 
+func TestIssue10538(t *testing.T) {
+	type element struct {
+		XMLName  Name
+		Children []interface{}
+	}
+
+	type svgstr struct {
+		element
+		Height string `xml:"height,attr,omitempty"`
+		Width  string `xml:"width,attr,omitempty"`
+	}
+
+	type svgstr2 struct {
+		XMLName  Name
+		Children []interface{}
+		Height   string `xml:"height,attr,omitempty"`
+		Width    string `xml:"width,attr,omitempty"`
+	}
+
+	s := svgstr{
+		element: element{XMLName: Name{Local: "svg", Space: "www.etc"}},
+		Width:   "400",
+		Height:  "200",
+	}
+
+	got, err := MarshalIndent(s, "", " ")
+	if err != nil {
+		t.Fatal(err)
+	}
+
+	s2 := svgstr2{
+		XMLName: Name{Local: "svg", Space: "www.etc"},
+		Width:   "400",
+		Height:  "200",
+	}
+
+	want, err := MarshalIndent(s2, "", " ")
+	if err != nil {
+		t.Fatal(err)
+	}
+
+	if !bytes.Equal(got, want) {
+		t.Errorf("got '%s', want '%s'", got, want)
+	}
+}
+
+func TestIssue16497(t *testing.T) {
+
+	type IQ struct {
+		Type    string `xml:"type,attr"`
+		XMLName Name   `xml:"iq"`
+	}
+
+	type embedIQ struct {
+		IQ IQ
+	}
+
+	// Anonymous struct
+	resp := struct {
+		IQ
+	}{}
+
+	var err error
+	err = Unmarshal([]byte(`<iq/>`), &resp)
+	if err != nil {
+		t.Fatalf("unmarshal anonymous struct failed with %s", err)
+	}
+	var respEmbed embedIQ
+	err = Unmarshal([]byte(`<iq/>`), &respEmbed)
+	if err != nil {
+		t.Fatalf("unmarshal anonymous struct failed with %s", err)
+	}
+	if !reflect.DeepEqual(resp, respEmbed.IQ) {
+		t.Errorf("%s %s", resp.Type, respEmbed.IQ.Type)
+		t.Errorf("%s %s", resp.XMLName, respEmbed.IQ.XMLName)
+	}
+}
+
 // Issue 11719. EncodeToken used to silently eat tokens with an invalid type.
 func TestSimpleUseOfEncodeToken(t *testing.T) {
 	var buf strings.Builder
diff --git a/src/encoding/xml/typeinfo.go b/src/encoding/xml/typeinfo.go
index b18ed284a6..684d37c066 100644
--- a/src/encoding/xml/typeinfo.go
+++ b/src/encoding/xml/typeinfo.go
@@ -76,6 +76,9 @@ func getTypeInfo(typ reflect.Type) (*typeInfo, error) {
 						return nil, err
 					}
 					if tinfo.xmlname == nil {
+						if inner.xmlname != nil && len(inner.fields) != 0 {
+							inner.xmlname.idx = append([]int{i}, inner.xmlname.idx...)
+						}
 						tinfo.xmlname = inner.xmlname
 					}
 					for _, finfo := range inner.fields {
-- 
2.37.3.windows.1

